apply plugin: 'com.android.library'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    greendao {
        schemaVersion rootProject.ext.greendao.schemaVersion //指定数据库schema版本号，迁移等操作会用到
        daoPackage rootProject.ext.greendao.daoPackage //通过gradle插件生成的数据库相关文件的包名，默认为你的entity所在的包名
        //targetGenDir 'src/main/java'//这就是我们上面说到的自定义生成数据库文件的目录了，可以将生成的文件放到我们的java目录中，而不是build中，这样就不用额外的设置资源目录了
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["recyclerview-v7"]
    api rootProject.ext.dependencies["design"]

    api rootProject.ext.dependencies["retrofit"]
    api rootProject.ext.dependencies["okhttp3"]
    api rootProject.ext.dependencies["logging-interceptor"]
    api rootProject.ext.dependencies["adapter-rxjava2"]

    api rootProject.ext.dependencies["rxjava2"]
    api rootProject.ext.dependencies["rxandroid"]

    api rootProject.ext.dependencies["fastjson"]

    api rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    api rootProject.ext.dependencies["easypermissions"]

    api rootProject.ext.dependencies["immersionbar"]

    api rootProject.ext.dependencies["glide"]
    api (rootProject.ext.dependencies["okhttp3-integration"]) {
        //排除过渡依赖
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    api (rootProject.ext.dependencies["recyclerview-integration"]){
        // Excludes the support library because it's already included by Glide.
        //排除所有过渡依赖
        transitive = false
    }
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]

    api rootProject.ext.dependencies["eventbus"]

    api rootProject.ext.dependencies["greendao"]

    api rootProject.ext.dependencies["android-log"]

    debugApi rootProject.ext.dependencies["leakcanary-android"]
    releaseApi rootProject.ext.dependencies["leakcanary-android-no-op"]
    debugApi rootProject.ext.dependencies["leakcanary-support-fragment"]

    api rootProject.ext.dependencies["arouter-api"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]

    api rootProject.ext.dependencies["dagger"]
    api rootProject.ext.dependencies["dagger-android"]
    api rootProject.ext.dependencies["dagger-android-support"]

}
